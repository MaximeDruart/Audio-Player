{"version":3,"sources":["svgs/play.svg","Slider.js","App.js","serviceWorker.js","index.js","svgs/pause.svg","svgs/next.svg","svgs/music.svg","covers/cover01.jpg","covers/cover02.jpg","covers/cover03.jpg","covers/cover04.jpg","audios/audio01.mp3","audios/audio02.mp3","audios/audio03.mp3","audios/audio04.mp3"],"names":["module","exports","Slider","props","changeValue","event","target","clientX","getBoundingClientRect","width","relativePos","x","audio","mapPos","mapRange","startValue","endValue","setState","currentValue","currentValuePercentage","stateProperty","minIndex","powersOf2","minDiff","Infinity","forEach","pow","index","Math","abs","state","onClick","this","changeHandlerAudio","e","changeHandler","className","toFixed","style","audioCurrentValuePercentage","Component","App","storeState","localStorage","setItem","volume","activeTrack","setLocalStorageState","getItem","JSON","parse","audios","setVolume","formatTime","string","parseInt","min","second","toString","getSongsDuration","tempData","musicData","track","Audio","file","duration","getData","musicDataJSON","sketch","p","fft","spectrum","waveform","preload","push","loadSound","audioSources","covers","loadImage","coverSources","setup","getCoverColor","fileIsLoaded","$visualizer","current","height","canvasSize","visRadius","createCanvas","parent","p5","FFT","smoothing","samples","frameRate","draw","smoothingSave","samplesSave","angleMode","DEGREES","clear","noStroke","analyze","translate","rotate","slice","floor","length","value","angle","map","valueCopy","amplitude","fill","coverColor","rect","pop","beginShape","waveformMultiplier","minimum","cos","y","sin","vertex","ellipse","endShape","windowResized","resizeCanvas","toggleAudio","trackNumber","trackNbParam","jump","stop","isPlaying","pause","prevState","play","dragAndDrop","clientY","type","upDownDelay","Date","setTimeout","mouseIsDown","mouseDragStart","startVolume","changeVolume","mouseDragDeltas","Vibrant","getPalette","then","palette","LightVibrant","getRgb","changeSongMoment","songCMT","currentMusicTime","fade","changeSong","direction","canChangePrevious","canChangeNext","playlistSwitch","activeScreen","optionSwitch","classList","contains","displayOptions","keyboardEventsHandler","window","addEventListener","code","updateStateFromSlider","newValue","visualizer","React","createRef","$cover","cover1","cover2","cover3","cover4","audio1","audio2","audio3","audio4","interval","setInterval","currentTime","clearInterval","backgroundImageStyle","backgroundImageStyleCover","cmtWidthStyle","soundStyle","renderedPlaylist","soundTransformValue","backgroundSize","backgroundPosition","key","alt","src","pauseButton","playButton","artistName","title","transitionName","transitionEnterTimeout","transitionLeaveTimeout","id","ref","transitionAppear","transitionAppearTimeout","album","nextSymbol","onMouseDown","onMouseUp","onMouseMove","onMouseLeave","musicSymbol","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef7fe546.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play.3d0531f4.svg\";","import React, {Component} from 'react'\r\nimport { mapRange } from 'gsap/all';\r\n\r\nclass Slider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentValue : this.props.currentValue,\r\n      currentValuePercentage: mapRange(this.props.startValue, this.props.endValue, 0, 100, this.props.currentValue)\r\n    }\r\n  }\r\n\r\n  changeValue = event => {\r\n    let { target, clientX } = event\r\n    let { width, x } = target.getBoundingClientRect()\r\n    let relativePos = clientX - x\r\n    relativePos /= width\r\n    // audio seekbar is handled separately\r\n    if (!this.props.audio) {\r\n      let mapPos = mapRange(0, 1, this.props.startValue, this.props.endValue, relativePos)\r\n      this.setState({\r\n        currentValue : mapPos,\r\n        currentValuePercentage : relativePos * 100\r\n      }) \r\n\r\n      // samples need to be a power of 2 so some tweaking is needed\r\n      if (this.props.stateProperty === 'samples') {\r\n        let powersOf2 = [2,4,8,16,32,64,128,256,512,1024,2048], minIndex, minDiff = Infinity\r\n        powersOf2.forEach((pow, index) => {\r\n          if (minDiff > Math.abs(pow-mapPos)) {\r\n            minDiff = Math.abs(pow-mapPos)\r\n            minIndex = index\r\n          }\r\n        })\r\n        return powersOf2[minIndex] \r\n      }\r\n      return mapPos\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        onClick={ this.props.audio ? // cannot quite fit the audio slider with the others so i'm running another fn\r\n        this.props.changeHandlerAudio\r\n        : e => this.props.changeHandler(this.props.stateProperty, this.changeValue(e))\r\n        }\r\n        className=\"progressBar\"\r\n       >\r\n        <div className = \"currentTime\"> {\r\n          typeof this.props.currentValue === 'string' ? this.props.currentValue : this.props.currentValue.toFixed(2)\r\n        }</div>\r\n        <div className=\"totalTime\">{this.props.endValue}</div>\r\n        <div\r\n          style={{'width' : `${this.state.currentValuePercentage || this.props.audioCurrentValuePercentage}%`}}\r\n          className=\"timeProgression\"\r\n        ></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Slider","import React, { Component } from 'react'\r\nimport { CSSTransitionGroup } from 'react-transition-group'\r\nimport p5 from 'p5'\r\nimport 'p5/lib/addons/p5.sound'\r\nimport * as Vibrant from 'node-vibrant'\r\n\r\nimport Slider from './Slider'\r\nimport musicDataJSON from './musicData.json'\r\nimport './App.css'\r\n\r\nimport playButton from './svgs/play.svg'\r\nimport pauseButton from './svgs/pause.svg'\r\nimport musicSymbol from './svgs/music.svg'\r\nimport nextSymbol from './svgs/next.svg'\r\nimport cover1 from './covers/cover01.jpg'\r\nimport cover2 from './covers/cover02.jpg'\r\nimport cover3 from './covers/cover03.jpg'\r\nimport cover4 from './covers/cover04.jpg'\r\nimport audio1 from './audios/audio01.mp3'\r\nimport audio2 from './audios/audio02.mp3'\r\nimport audio3 from './audios/audio03.mp3'\r\nimport audio4 from './audios/audio04.mp3'\r\n// import * as gsap from 'gsap/all'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      visualizer: \"\",\r\n      visRadius: \"\",\r\n      musicData: \"\",\r\n      canvasSize: {\r\n        width: \"\",\r\n        height: \"\"\r\n      },\r\n      fileIsLoaded: false,\r\n      activeTrack: 0,\r\n      activeScreen: \"nowPlaying\",\r\n      displayOptions : false,\r\n      currentMusicTime: 0,\r\n      volume: 0.4,\r\n      audios: [],\r\n      coverColor: \"white\",\r\n      mouseIsDown : false,\r\n      smoothing : 0.8,\r\n      samples : 256,\r\n      amplitude : 0.4\r\n    }\r\n    this.smoothingSave = this.state.smoothing\r\n    this.samplesSave = this.state.samples\r\n    this.$visualizer = React.createRef()\r\n    this.$cover = React.createRef()\r\n    this.audios = []\r\n    this.covers = []\r\n    this.coverSources = [cover1, cover2, cover3, cover4]\r\n    this.audioSources = [audio1, audio2, audio3, audio4]\r\n\r\n    this.mouseDragStart = {}\r\n    this.mouseDragDeltas= {}\r\n    this.startVolume = this.state.volume\r\n  }\r\n\r\n  storeState = () => {\r\n    localStorage.setItem('volume', this.state.volume)\r\n    localStorage.setItem('activeTrack', this.state.activeTrack)\r\n  }\r\n\r\n  setLocalStorageState = () => {\r\n    if (localStorage.getItem('volume') && localStorage.getItem('activeTrack')) {\r\n      this.setState({\r\n        volume: JSON.parse(localStorage.getItem('volume')),\r\n        activeTrack: JSON.parse(localStorage.getItem('activeTrack'))\r\n      })\r\n    }\r\n    if (this.state.audios) this.state.audios.forEach(audio => audio.setVolume(this.state.volume))\r\n  }\r\n\r\n  formatTime = string => {\r\n    string = parseInt(string)\r\n    let min = (parseInt(string / 60))\r\n    min = min < 10 ? \"0\" + min.toString() : min.toString()\r\n    let second = string - min * 60\r\n    second = second < 10 ? \"0\" + second.toString() : second.toString()\r\n    return min + \":\" + second\r\n  }\r\n\r\n  getSongsDuration = () => {\r\n    let tempData = this.state.musicData\r\n    this.state.musicData.forEach((track, index) => {\r\n      let audio = new Audio(tempData[index].file)\r\n      tempData[index].duration = audio.duration\r\n    })\r\n    this.setState({ musicData: tempData });\r\n  }\r\n\r\n  getData = () => {\r\n    // wanted to do an api call but couldn't find an api that'd give me audio files...\r\n    this.setState({ musicData: musicDataJSON });\r\n  }\r\n\r\n\r\n  sketch = p => {\r\n    let fft\r\n    let spectrum\r\n    let waveform\r\n\r\n    p.preload = () => {\r\n      this.state.musicData.forEach((track, index) => {\r\n        this.audios.push(p.loadSound(this.audioSources[index]))\r\n        this.covers.push(p.loadImage(this.coverSources[index]))\r\n      })\r\n    }\r\n\r\n    p.setup = () => {\r\n      this.getCoverColor()\r\n      this.setState({ fileIsLoaded: true, audios: this.audios })\r\n      let { width, height } = this.$visualizer.current.getBoundingClientRect()\r\n      this.setState({\r\n        canvasSize: { width: width, height: height },\r\n        visRadius: (width * 1/2) / 2 // canvas is a half of its container and we divide by 2 again for radius and not diameter\r\n      })\r\n      p.createCanvas(width, height).parent('canvasContainer')\r\n      fft = new p5.FFT(this.state.smoothing, this.state.samples)\r\n      p.frameRate(60)\r\n    }\r\n\r\n    p.draw = () => {\r\n      if (this.smoothingSave !== this.state.smoothing) {\r\n        fft = new p5.FFT(this.state.smoothing, this.state.samples)\r\n        this.smoothingSave = this.state.smoothing\r\n      }\r\n      if (this.samplesSave !== this.state.samples) {\r\n        fft = new p5.FFT(this.state.smoothing, this.state.samples)\r\n        this.samplesSave = this.state.samples\r\n      }\r\n      p.angleMode(p.DEGREES)\r\n      p.clear()\r\n      p.noStroke()\r\n      spectrum = fft.analyze()\r\n      waveform = fft.waveform()\r\n      p.translate(this.state.canvasSize.width / 2, this.state.canvasSize.height / 2)\r\n      p.rotate(-20)\r\n      spectrum =  spectrum.slice(0, Math.floor(spectrum.length *(2/3)))\r\n\r\n      // drawing spikes\r\n      spectrum.forEach((value, index) => {\r\n        let angle = p.map(index, 0, spectrum.length, 0, 360)\r\n        let valueCopy = p.map(value, 0, 255, this.state.visRadius*1.10, this.state.canvasSize.width * this.state.amplitude)\r\n        // let cosVal = valueCopy * p.cos(angle)\r\n        // let sinVal = valueCopy * p.sin(angle)\r\n        p.fill(this.state.coverColor)\r\n        p.noStroke()\r\n        p.push()\r\n        p.rotate(angle)\r\n        p.rect(0, 0, 9, valueCopy)\r\n        p.pop()\r\n      })\r\n\r\n      \r\n      // drawing the inner circle\r\n      p.beginShape()\r\n      spectrum.forEach((value, index) => {\r\n        let angle = p.map(index, 0, spectrum.length, 0, 360)\r\n        let waveformMultiplier = p.map(waveform[index], -1, 1, 1, 1.05)\r\n        let minimum = this.state.visRadius * waveformMultiplier * 1.05\r\n        let x = p.cos(angle) * minimum\r\n        let y = p.sin(angle) * minimum\r\n        p.vertex(x, y)\r\n        p.fill(\"#16191D\")\r\n        p.ellipse(0, 0, minimum, minimum)\r\n      })\r\n      p.endShape()\r\n    }\r\n\r\n    p.windowResized = () => {\r\n      let { width, height } = this.$visualizer.current.getBoundingClientRect()\r\n      this.setState({\r\n        canvasSize: { width: width, height: height },\r\n        visRadius: (width * 1 / 2) / 2\r\n      })\r\n      p.resizeCanvas(width, height)\r\n    }\r\n\r\n  }\r\n\r\n  toggleAudio = (trackNbParam = \"noparam\") => {\r\n    let trackNumber\r\n    if (trackNbParam === \"noparam\") {\r\n      trackNumber = this.state.activeTrack\r\n    } else {\r\n      trackNumber = trackNbParam\r\n      this.setState({ activeTrack: trackNbParam });\r\n    }\r\n    this.state.audios.forEach((audio, index) => {\r\n      if (index !== trackNumber) {\r\n        audio.jump(0)\r\n        audio.stop()\r\n      }\r\n    })\r\n    if (this.state.fileIsLoaded && this.state.audios[trackNumber]) {\r\n      if (this.state.audios[trackNumber].isPlaying()) {\r\n        this.state.audios[trackNumber].pause()\r\n        this.setState(prevState => {\r\n          return { audios: prevState.audios };\r\n        });\r\n      } else {\r\n        this.state.audios[trackNumber].play()\r\n        this.setState(prevState => {\r\n          return { audios: prevState.audios };\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  dragAndDrop = event => {\r\n    const {target, clientY, clientX} = event\r\n    const {height, width} = target.getBoundingClientRect()\r\n\r\n    if (event.type === 'mousedown') {\r\n      this.upDownDelay = new Date()      \r\n      // waiting for the volume slide animation to end\r\n      setTimeout(() => {\r\n        this.setState({ mouseIsDown: true })\r\n      }, 200)\r\n\r\n      this.mouseDragStart = {\r\n        x : clientX,\r\n        y : clientY\r\n      }\r\n      this.startVolume = this.changeVolume(event)\r\n    } else if (event.type === 'mousemove' && this.state.mouseIsDown) {\r\n      this.mouseDragDeltas = {\r\n        x : (this.mouseDragStart.x - (clientX)) / width, \r\n        y: (this.mouseDragStart.y - (clientY)) / height, \r\n      }\r\n      this.setState({ volume: this.startVolume + this.mouseDragDeltas.y })\r\n\r\n    } else if (event.type === 'mouseup' || event.type === 'mouseleave') {\r\n      // kinda sketchy but it's the simpliest to avoid conflicts with simple click (who fires down and up events in less than .2s)\r\n      if (new Date()-this.upDownDelay < 300) {\r\n        setTimeout(() => {\r\n          this.setState({ mouseIsDown: false })\r\n        }, 200)\r\n      } else {\r\n        this.setState({ mouseIsDown: false })\r\n      }\r\n    }\r\n  }\r\n\r\n  changeVolume = event => {\r\n    let { target, clientY } = event\r\n    let { height, y } = target.getBoundingClientRect()\r\n    let relativePos = clientY - y\r\n    relativePos /= height\r\n    relativePos = 1 - relativePos\r\n    this.setState({ volume: relativePos })\r\n    this.state.audios.forEach((audio) => {\r\n      audio.setVolume(relativePos)\r\n    })\r\n    return relativePos\r\n  }\r\n\r\n\r\n  getCoverColor = () => {\r\n    Vibrant.from(this.coverSources[this.state.activeTrack]).getPalette()\r\n      .then((palette) => this.setState({ coverColor: palette.LightVibrant.getRgb() }))\r\n  }\r\n\r\n  changeSongMoment = event => {\r\n    let { target, clientX } = event\r\n    let { width, x } = target.getBoundingClientRect()\r\n    let relativePos = clientX - x\r\n    relativePos /= width\r\n    if (this.state.audios[this.state.activeTrack]) {\r\n      this.state.audios[this.state.activeTrack].stop()\r\n      setTimeout(() => {\r\n        let songCMT = parseInt(relativePos * this.state.audios[this.state.activeTrack].duration())\r\n        this.setState({ currentMusicTime: songCMT })\r\n        this.state.audios[this.state.activeTrack].jump(songCMT)\r\n        this.state.audios[this.state.activeTrack].fade(this.state.volume, 2)\r\n      }, 10);\r\n    }\r\n  }\r\n\r\n  changeSong = direction => {\r\n    if (this.state.currentMusicTime > 3 && direction === \"previous\") {\r\n      this.state.audios[this.state.activeTrack].stop()\r\n      setTimeout(() => {\r\n        this.setState({ currentMusicTime: 0 });\r\n        this.state.audios[this.state.activeTrack].jump(0)\r\n      }, 10)\r\n      return\r\n    }\r\n    let canChangePrevious = direction === \"previous\" && this.state.activeTrack >= 1\r\n    let canChangeNext = direction === \"next\" && this.state.activeTrack < this.state.musicData.length - 1\r\n    this.setState(prevState => {\r\n      if (canChangePrevious) {\r\n        return { activeTrack: prevState.activeTrack - 1 }\r\n      } else if (this.state.musicData) {\r\n        if (canChangeNext) {\r\n          return { activeTrack: prevState.activeTrack + 1 }\r\n        }\r\n      }\r\n    })\r\n\r\n    // c'est ghetto mais jsp pas pourquoi il y a un délai sur la modif de state au dessus\r\n    setTimeout(() => {\r\n      if (canChangeNext || canChangePrevious) {\r\n        this.getCoverColor()\r\n        this.state.audios.forEach((audio, index) => {\r\n          if (canChangeNext) {\r\n            if (index !== this.state.activeTrack) {\r\n              audio.jump(0)\r\n              audio.stop()\r\n            } else {\r\n              audio.jump(0)\r\n              audio.fade(this.state.volume, 5)\r\n            }\r\n          } else if (canChangePrevious) {\r\n            if (index !== this.state.activeTrack) {\r\n              audio.jump(0)\r\n              audio.stop()\r\n            } else {\r\n              audio.jump(0)\r\n              audio.fade(this.state.volume, 5)\r\n            }\r\n          }\r\n        })\r\n      }\r\n    }, 150);\r\n  }\r\n\r\n  playlistSwitch = () => {\r\n    if (this.state.activeScreen === \"nowPlaying\") {\r\n      this.setState({ activeScreen: \"playlist\" })\r\n    } else {\r\n      this.setState({ activeScreen: \"nowPlaying\" })\r\n    }\r\n  }\r\n\r\n  optionSwitch = event => {\r\n    if (event.target.classList.contains('cover')) {\r\n      this.setState(prevState => {\r\n        return { displayOptions: !prevState.displayOptions }\r\n      })\r\n    }\r\n    \r\n  }\r\n\r\n  keyboardEventsHandler = () => {\r\n\r\n    window.addEventListener('keydown', event => {\r\n      if (this.state.audios[this.state.activeTrack]) {\r\n        switch (event.code) {\r\n          case \"Space\":\r\n            this.toggleAudio()\r\n            break;\r\n\r\n          case \"ArrowRight\":\r\n            this.changeSong(\"next\")\r\n            break;\r\n\r\n          case \"ArrowLeft\":\r\n            this.changeSong(\"previous\")\r\n\r\n            break;\r\n\r\n          case \"ArrowUp\":\r\n            if (this.state.volume >= 0.95) {\r\n              this.setState({ volume: 1 });\r\n            } else {\r\n              this.setState(prevState => {\r\n                return { volume: prevState.volume + 0.05 };\r\n              })\r\n            }\r\n            break;\r\n          case \"ArrowDown\":\r\n            if (this.state.volume <= 0.05) {\r\n              this.setState({ volume: 0 });\r\n            } else {\r\n              this.setState(prevState => {\r\n                return { volume: prevState.volume - 0.05 };\r\n              })\r\n            }\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setLocalStorageState()\r\n    this.getData()\r\n\r\n    this.setState({\r\n      visRadius : (this.$visualizer.current.getBoundingClientRect().width *2/3) / 2,\r\n      visualizer: new p5(this.sketch)\r\n    })\r\n    this.keyboardEventsHandler()\r\n\r\n    this.interval = setInterval(() => {\r\n      if (this.state.audios[this.state.activeTrack]) {\r\n        if (this.state.audios[this.state.activeTrack].isPlaying()) {\r\n          this.setState({ currentMusicTime: parseInt(this.state.audios[this.state.activeTrack].currentTime()) });\r\n        }\r\n      }\r\n    }, 10)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval)\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.storeState()\r\n  }\r\n\r\n  updateStateFromSlider = (stateProperty, newValue) => { \r\n    this.setState({ [stateProperty]: newValue })\r\n  }\r\n\r\n  render() {\r\n    let backgroundImageStyle, backgroundImageStyleCover\r\n    let cmtWidthStyle\r\n    let soundStyle\r\n    let soundTransformValue = 50\r\n    if (this.state.musicData) {\r\n      backgroundImageStyle = {\r\n        'backgroundImage': `url(${this.coverSources[this.state.activeTrack]})`,\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center center'\r\n      }\r\n      backgroundImageStyleCover = {\r\n        'backgroundImage': `url(${this.coverSources[this.state.activeTrack]})`,\r\n        backgroundSize: 'auto 105%',\r\n        backgroundPosition: 'center center'\r\n      }\r\n      if (this.state.audios[this.state.activeTrack]) {\r\n        cmtWidthStyle = {\r\n          'width': parseInt((this.state.currentMusicTime / this.state.audios[this.state.activeTrack].duration()) * 100) + \"%\"\r\n        }\r\n        soundTransformValue = -(1 - this.state.volume) * 100\r\n        soundStyle = {\r\n          'transform': `rotate(180deg) translateY(${soundTransformValue}%)`,\r\n          'transition': this.state.mouseIsDown ? 'none' : 'transform 0.2s ease-in-out'\r\n        }\r\n      }\r\n    }\r\n    let renderedPlaylist\r\n    if (this.state.musicData) {\r\n      renderedPlaylist = this.state.musicData.map((track, index) =>\r\n        <div key={index} className=\"playlistElement\">\r\n          <img\r\n            onClick={() => { this.toggleAudio(index) }}\r\n            alt=\"cover\"\r\n            src={!this.state.audios[index]\r\n              ? playButton\r\n              : this.state.audios[index].isPlaying() ? pauseButton : playButton\r\n            }\r\n            className=\"playButton\"\r\n          ></img>\r\n          <div className=\"playlistWrap\">\r\n            <div className=\"left\">\r\n              <div className=\"artist\">{track.artistName + \" - \"}</div>\r\n              <div className=\"dash\">-</div>\r\n              <div className=\"title\">{track.title}</div>\r\n            </div>\r\n            <div className=\"duration\">{this.state.audios[index] ? this.formatTime(this.state.audios[index].duration()) : track.duration}</div>\r\n            {(index === this.state.activeTrack) ? <div style={cmtWidthStyle} className=\"timeProgression\"></div> : \"\"}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"background\">\r\n          <CSSTransitionGroup\r\n            transitionName=\"bgTransition\"\r\n            transitionEnterTimeout={300}\r\n            transitionLeaveTimeout={300}\r\n          >\r\n            <div key={this.state.activeTrack} style={backgroundImageStyle} className=\"bgImage\"></div>\r\n          </CSSTransitionGroup>\r\n          <div className=\"bgFilter\"></div>\r\n        </div>\r\n        <div className=\"musicPlayer\">\r\n          <div className=\"visualizer\">\r\n            {/* dummy div for to replace p5 base loading screen */}\r\n            <div style={{'display' : 'none'}} id=\"p5_loading\" className=\"loading\">LOADING</div>\r\n            <div className = {!this.state.fileIsLoaded ? \"loadingAnim load-on\" : \"loadingAnim load-off\"}>\r\n            </div>\r\n            <div ref={this.$visualizer} id=\"canvasContainer\"></div>\r\n            {this.state.fileIsLoaded && this.state.audios[this.state.activeTrack] ?\r\n              ( !this.state.displayOptions ?\r\n                <CSSTransitionGroup\r\n                  transitionName=\"cover\"\r\n                  transitionAppear={true}\r\n                  transitionAppearTimeout={500}\r\n                  transitionEnterTimeout={500}\r\n                  transitionLeaveTimeout={300}\r\n                >\r\n                  <div onClick={this.optionSwitch} ref={this.$cover} key={this.state.activeTrack} style={backgroundImageStyleCover} className=\"cover cover-img\"></div>\r\n                </CSSTransitionGroup>\r\n                : <div onClick={this.optionSwitch} ref={this.$cover} key={this.state.activeTrack} className=\"cover cover-options\">\r\n                  <div className=\"options-wrapper\">\r\n                    <div className=\"option\">\r\n                      <div className=\"option-txt\">smoothing</div>\r\n                      <Slider\r\n                        startValue={0}\r\n                        endValue={1}\r\n                        stateProperty={'smoothing'}\r\n                        currentValue={this.state.smoothing}\r\n                        changeHandler={this.updateStateFromSlider}\r\n                      ></Slider>\r\n                    </div>\r\n                    <div className=\"option\">\r\n                      <div className=\"option-txt\">Samples</div>\r\n                      <Slider\r\n                        startValue={64}\r\n                        endValue={1024}\r\n                        stateProperty={'samples'}\r\n                        currentValue={this.state.samples}\r\n                        changeHandler={this.updateStateFromSlider}\r\n                      ></Slider>\r\n                    </div>\r\n                    <div className=\"option\">\r\n                      <div className=\"option-txt\">Amplitude</div>\r\n                      <Slider\r\n                        startValue={0.3}\r\n                        endValue={0.6}\r\n                        stateProperty={'amplitude'}\r\n                        currentValue={this.state.amplitude}\r\n                        changeHandler={this.updateStateFromSlider}\r\n                      ></Slider>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                )\r\n              : \"\"\r\n            }\r\n          </div>\r\n          <div className=\"card\">\r\n            {this.state.activeScreen === \"nowPlaying\" ?\r\n              <div className=\"flex-wrap\">\r\n                <div className=\"info\">\r\n                  <div className=\"artist\">{this.state.musicData ? this.state.musicData[this.state.activeTrack].artistName : \"artist\"}</div>\r\n                  <div className=\"album\">{this.state.musicData ? this.state.musicData[this.state.activeTrack].album : \"album\"}</div>\r\n                  <div className=\"title\">{this.state.musicData ? this.state.musicData[this.state.activeTrack].title : \"title\"}</div>\r\n                </div>\r\n                <div className=\"controls\">\r\n                  <img\r\n                    src={nextSymbol}\r\n                    onClick={() => { this.changeSong(\"previous\") }}\r\n                    className=\"before\"\r\n                    alt=\"before-button\"\r\n                  ></img>\r\n                  <img\r\n                    src={this.state.fileIsLoaded ? (this.state.audios[this.state.activeTrack].isPlaying() ? pauseButton : playButton) : playButton}\r\n                    onClick={()=> {this.toggleAudio() }}\r\n                    className=\"playPause\"\r\n                    alt=\"play music\"\r\n                  ></img>\r\n                  <img\r\n                    src={nextSymbol}\r\n                    onClick={() => { this.changeSong(\"next\") }}\r\n                    className=\"next\"\r\n                    alt=\"next-button\"\r\n                  ></img>\r\n                </div>\r\n                <Slider\r\n                  audio={this.state.audios[this.state.activeTrack]}\r\n                  startValue={this.formatTime(this.state.currentMusicTime)}\r\n                  endValue={this.state.musicData && this.state.audios[this.state.activeTrack] ? this.formatTime(this.state.audios[this.state.activeTrack].duration()) : \"00:00\"}\r\n                  currentValue = {this.formatTime(this.state.currentMusicTime)}\r\n                  audioCurrentValuePercentage={this.state.musicData && this.state.audios[this.state.activeTrack] ?\r\n                    parseInt((this.state.currentMusicTime / this.state.audios[this.state.activeTrack].duration()) * 100)\r\n                    : 0\r\n                  }\r\n                  changeHandlerAudio={this.changeSongMoment}\r\n                ></Slider>\r\n              </div>\r\n              : renderedPlaylist ?\r\n                // <CSSTransitionGroup\r\n                //     transitionName = \"playlist-pop\"\r\n                //     transitionEnterTimeout={500}\r\n                //     transitionLeaveTimeout={300}\r\n                // >\r\n                <div key={this.state.activeTrack} className=\"playlist\">{renderedPlaylist}</div>\r\n                // </CSSTransitionGroup>\r\n                : \"loading\"\r\n            }\r\n            <div onClick={this.playlistSwitch} className=\"playlistSwitch\">{this.state.activeScreen === 'nowPlaying' ? \"PLAYLIST\" : 'PLAYING NOW'}</div>\r\n            <div\r\n              onMouseDown = {this.dragAndDrop}\r\n              onMouseUp = {this.dragAndDrop}\r\n              onMouseMove = {this.dragAndDrop}\r\n              onMouseLeave = {this.dragAndDrop}\r\n              className=\"volume\"\r\n            >\r\n              <img src={musicSymbol} alt=\"music symobl\" className=\"volumeIcon\"></img>\r\n              <div style={soundStyle} className=\"volumeProgression\">\r\n                <div className=\"volumePercentage\">{parseInt(this.state.volume * 100)}%</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()","module.exports = __webpack_public_path__ + \"static/media/pause.a83244f8.svg\";","module.exports = __webpack_public_path__ + \"static/media/next.b4705597.svg\";","module.exports = __webpack_public_path__ + \"static/media/music.40b86523.svg\";","module.exports = __webpack_public_path__ + \"static/media/cover01.1845849d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cover02.19f85108.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cover03.83d85b4c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cover04.b93229bb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/audio01.dc170e87.mp3\";","module.exports = __webpack_public_path__ + \"static/media/audio02.04420354.mp3\";","module.exports = __webpack_public_path__ + \"static/media/audio03.750bbe23.mp3\";","module.exports = __webpack_public_path__ + \"static/media/audio04.95225891.mp3\";"],"sourceRoot":""}