{"version":3,"sources":["svgs/play.svg","Slider.js","App.js","serviceWorker.js","index.js","svgs/pause.svg","svgs/next.svg","svgs/music.svg","svgs/settings.svg","covers/cover01.jpg","covers/cover02.jpg","covers/cover03.jpg","covers/cover04.jpg","audios/audio01.mp3","audios/audio02.mp3","audios/audio03.mp3","audios/audio04.mp3"],"names":["module","exports","Slider","props","changeValue","event","currentTarget","clientX","getBoundingClientRect","width","relativePos","x","mapPos","mapRange","startValue","endValue","setState","currentValue","currentValuePercentage","stateProperty","getClosestPow2","value","minIndex","powersOf2","minDiff","Infinity","forEach","pow","index","Math","abs","dragAndDrop","clientY","height","relativePosX","mapPosX","type","mouseIsDown","mouseDragStart","y","valueSavePercentage","state","mouseDragDeltasPercentage","deltaAdjustedValuePercentage","deltaAdjustedValue","onClick","this","audio","changeHandlerAudio","onMouseDown","e","changeHandler","onMouseMove","onMouseUp","onMouseLeave","className","toFixed","style","audioCurrentValuePercentage","Component","App","storeState","localStorage","setItem","volume","activeTrack","setStateToLocalStorage","getItem","JSON","parse","audios","setVolume","formatTime","string","parseInt","min","second","toString","getSongsDuration","tempData","musicData","track","Audio","file","duration","getData","musicDataJSON","sketch","p","fft","spectrum","waveform","preload","push","loadSound","audioSources","covers","loadImage","coverSources","setup","fileIsLoaded","getCoverColor","$visualizer","current","canvasSize","visRadius","createCanvas","parent","p5","FFT","smoothing","samples","frameRate","draw","smoothingSave","samplesSave","angleMode","DEGREES","clear","noStroke","analyze","translate","rotate","slice","floor","length","angle","map","valueCopy","amplitude","fill","coverColor","rect","pop","beginShape","waveformMultiplier","minimum","cos","sin","vertex","ellipse","endShape","windowResized","resizeCanvas","toggleAudio","trackNumber","trackNbParam","previousTrack","stop","isPlaying","pause","forceUpdate","play","startVolume","mouseDragDeltas","Vibrant","getPalette","then","palette","LightVibrant","getRgb","changeSongMoment","setTimeout","songCMT","currentMusicTime","jump","fade","changeSong","direction","canChangePrevious","canChangeNext","prevState","playlistSwitch","activeScreen","optionSwitch","displayOptions","keyboardEventsHandler","window","addEventListener","code","updateStateFromSlider","newValue","visualizer","React","createRef","cover1","cover2","cover3","cover4","audio1","audio2","audio3","audio4","increment","interval","setInterval","currentTime","loadingInterval","loadingInc","clearInterval","backgroundImageStyle","backgroundImageStyleCover","cmtWidthStyle","soundStyle","renderedPlaylist","soundTransformValue","backgroundSize","backgroundPosition","key","alt","src","pauseButton","playButton","artistName","title","transitionName","transitionEnterTimeout","transitionLeaveTimeout","id","ref","transitionAppear","transitionAppearTimeout","settings","repeat","album","nextSymbol","musicSymbol","PureComponent","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0253ef7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play.3d0531f4.svg\";","import React, {Component} from 'react'\r\nimport { mapRange } from 'gsap/all';\r\n\r\nclass Slider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentValue : this.props.currentValue,\r\n      currentValuePercentage: mapRange(this.props.startValue, this.props.endValue, 0, 100, this.props.currentValue),\r\n      mouseIsDown : false,\r\n      // orientation : \r\n    }\r\n    this.mouseDragStart = {}\r\n    this.mouseDragDeltasPercentage = {}\r\n    this.valueSavePercentage = 0\r\n  }\r\n\r\n  changeValue = event => {\r\n    // current target will be the target that the event listener has been attached to. even if the actual event is one of its children\r\n    let { currentTarget, clientX } = event\r\n    let { width, x } = currentTarget.getBoundingClientRect()\r\n    let relativePos = clientX - x\r\n    relativePos /= width\r\n    let mapPos = mapRange(0, 1, this.props.startValue, this.props.endValue, relativePos)\r\n    this.setState({\r\n      currentValue : mapPos,\r\n      currentValuePercentage : relativePos * 100\r\n    }) \r\n\r\n    // samples need to be a power of 2 so some tweaking is needed\r\n    return this.props.stateProperty === 'samples' ? this.getClosestPow2(mapPos) : mapPos\r\n  }\r\n\r\n  getClosestPow2 = value => {\r\n    let powersOf2 = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048],\r\n      minIndex, minDiff = Infinity\r\n    powersOf2.forEach((pow, index) => {\r\n      if (minDiff > Math.abs(pow - value)) {\r\n        minDiff = Math.abs(pow - value)\r\n        minIndex = index\r\n      }\r\n    })\r\n    return powersOf2[minIndex]\r\n  }\r\n\r\n  dragAndDrop = event => {\r\n    const {currentTarget, clientY, clientX} = event\r\n    const {height, width, x} = currentTarget.getBoundingClientRect()\r\n    // ideally the slider would accept an orientation prop which would allow for vertical and horizontal sliders\r\n    // let relativePosY = 1 - ((clientY - y) / height)\r\n\r\n    // getting mouse position as percentage of target ranging from 0 to 1\r\n    let relativePosX = (clientX - x) / width\r\n    // mapping it with the range provided by parent\r\n    let mapPosX = mapRange(0, 1, this.props.startValue, this.props.endValue, relativePosX)\r\n\r\n    // when the user starts a click, the slider moves to the click position then starts listening to mousemove events, ending when the user releases the click or leaves the slider dom\r\n\r\n    // even if there are no changes in the value, we still have to return it as it will be passed to the parent and will modify the state property of the parent (passed as a prop)\r\n    if (event.type === 'mousedown') {\r\n      this.setState({ mouseIsDown: true })\r\n      this.mouseDragStart = {\r\n        x : clientX,\r\n        y : clientY\r\n      } \r\n      this.setState({\r\n        currentValue : mapPosX ,\r\n        currentValuePercentage: relativePosX *100\r\n      },\r\n      () => this.valueSavePercentage = relativePosX)\r\n      return this.props.stateProperty === 'samples' ? this.getClosestPow2(mapPosX) : mapPosX\r\n\r\n    } else if (event.type === 'mousemove') {\r\n      if (this.state.mouseIsDown) {\r\n        // difference between start and actual (in percent)\r\n        this.mouseDragDeltasPercentage = {\r\n          x : (this.mouseDragStart.x - clientX) / width, \r\n          y: (this.mouseDragStart.y - clientY) / height, \r\n        }\r\n        // substract it from the saved value\r\n        let deltaAdjustedValuePercentage = this.valueSavePercentage - this.mouseDragDeltasPercentage.x\r\n        // lerp to get value\r\n        let deltaAdjustedValue = this.props.startValue  + ((this.props.endValue - this.props.startValue)* deltaAdjustedValuePercentage)   \r\n        this.setState({\r\n          currentValue: deltaAdjustedValue,\r\n          currentValuePercentage: deltaAdjustedValuePercentage * 100\r\n        })\r\n        return this.props.stateProperty ==='samples' ? this.getClosestPow2(deltaAdjustedValue) : deltaAdjustedValue\r\n      } else {\r\n        return this.props.stateProperty === 'samples' ? this.getClosestPow2(this.state.currentValue) : this.state.currentValue\r\n      }\r\n    } else if (event.type === 'mouseup' || event.type === 'mouseleave') {   \r\n      this.setState({ mouseIsDown: false }) \r\n      return this.props.stateProperty === 'samples' ? this.getClosestPow2(this.state.currentValue) : this.state.currentValue\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        onClick={ // cannot quite fit the audio slider with the others so i'm running another fn\r\n          this.props.audio && this.props.changeHandlerAudio\r\n        }\r\n        onMouseDown = {e => { if (!this.props.audio) this.props.changeHandler(this.props.stateProperty, this.dragAndDrop(e))}}\r\n        onMouseMove = {e => { if (!this.props.audio) this.props.changeHandler(this.props.stateProperty, this.dragAndDrop(e))}}\r\n        onMouseUp = {e => { if (!this.props.audio) this.props.changeHandler(this.props.stateProperty, this.dragAndDrop(e))}}\r\n        onMouseLeave = {e => { if (!this.props.audio) this.props.changeHandler(this.props.stateProperty, this.dragAndDrop(e))}}\r\n        className=\"progressBar\"\r\n       >\r\n        <div className = \"currentTime\"> {\r\n          typeof this.props.currentValue === 'string' ? this.props.currentValue : this.props.currentValue.toFixed(2)\r\n        }</div>\r\n        <div className=\"totalTime\">{this.props.endValue}</div>\r\n        <div\r\n          style={{\r\n            width : `${this.state.currentValuePercentage || this.props.audioCurrentValuePercentage}%`,\r\n          }}\r\n          className={ this.props.audio ? \"timeProgression tp-audio\" : \"timeProgression\"}\r\n          // className = {\"timeProgression\" + this.props.audio && \"tp-audio\"}\r\n        ></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Slider","import React, { PureComponent } from 'react'\r\nimport { CSSTransitionGroup } from 'react-transition-group'\r\nimport p5 from 'p5'\r\nimport 'p5/lib/addons/p5.sound'\r\nimport * as Vibrant from 'node-vibrant'\r\n\r\nimport Slider from './Slider'\r\nimport musicDataJSON from './musicData.json'\r\nimport './App.scss'\r\n\r\nimport playButton from './svgs/play.svg'\r\nimport pauseButton from './svgs/pause.svg'\r\nimport musicSymbol from './svgs/music.svg'\r\nimport nextSymbol from './svgs/next.svg'\r\nimport settings from './svgs/settings.svg'\r\nimport cover1 from './covers/cover01.jpg'\r\nimport cover2 from './covers/cover02.jpg'\r\nimport cover3 from './covers/cover03.jpg'\r\nimport cover4 from './covers/cover04.jpg'\r\nimport audio1 from './audios/audio01.mp3'\r\nimport audio2 from './audios/audio02.mp3'\r\nimport audio3 from './audios/audio03.mp3'\r\nimport audio4 from './audios/audio04.mp3'\r\n\r\nclass App extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      visualizer: \"\",\r\n      visRadius: \"\",\r\n      musicData: \"\",\r\n      canvasSize: {\r\n        width: \"\",\r\n        height: \"\"\r\n      },\r\n      fileIsLoaded: false,\r\n      activeTrack: 0,\r\n      activeScreen: \"nowPlaying\",\r\n      displayOptions : false,\r\n      currentMusicTime: 0,\r\n      volume: 0.4,\r\n      audios: [],\r\n      coverColor: \"white\",\r\n      mouseIsDown : false,\r\n      smoothing : 0.8,\r\n      samples : 256,\r\n      amplitude : 0.4,\r\n    }\r\n    this.smoothingSave = this.state.smoothing\r\n    this.samplesSave = this.state.samples\r\n    this.$visualizer = React.createRef()\r\n    this.audios = []\r\n    this.covers = []\r\n    this.coverSources = [cover1, cover2, cover3, cover4]\r\n    this.audioSources = [audio1, audio2, audio3, audio4]\r\n\r\n    this.mouseDragStart = {}\r\n    this.mouseDragDeltas= {}\r\n    this.startVolume = this.state.volume\r\n    this.increment = 0.5\r\n  }\r\n\r\n  storeState = () => {\r\n    localStorage.setItem('volume', this.state.volume)\r\n    localStorage.setItem('activeTrack', this.state.activeTrack)\r\n  }\r\n\r\n  setStateToLocalStorage = () => {\r\n    if (localStorage.getItem('volume') && localStorage.getItem('activeTrack')) {\r\n      this.setState({\r\n        volume: JSON.parse(localStorage.getItem('volume')),\r\n        activeTrack: JSON.parse(localStorage.getItem('activeTrack'))\r\n      }, () => {\r\n        if (this.state.audios) this.state.audios.forEach(audio => audio.setVolume(this.state.volume))\r\n      })\r\n    }\r\n  }\r\n\r\n  formatTime = string => {\r\n    string = parseInt(string)\r\n    let min = (parseInt(string / 60))\r\n    min = min < 10 ? \"0\" + min.toString() : min.toString()\r\n    let second = string - min * 60\r\n    second = second < 10 ? \"0\" + second.toString() : second.toString()\r\n    return min + \":\" + second\r\n  }\r\n\r\n  getSongsDuration = () => {\r\n    let tempData = this.state.musicData\r\n    this.state.musicData.forEach((track, index) => {\r\n      let audio = new Audio(tempData[index].file)\r\n      tempData[index].duration = audio.duration\r\n    })\r\n    this.setState({ musicData: tempData });\r\n  }\r\n\r\n  getData = () => {\r\n    // wanted to do an api call but couldn't find an api that'd give me audio files...\r\n    this.setState({ musicData: musicDataJSON });\r\n  }\r\n\r\n\r\n  sketch = p => {\r\n    let fft\r\n    let spectrum\r\n    let waveform\r\n\r\n    p.preload = () => {\r\n      this.state.musicData.forEach((track, index) => {\r\n        this.audios.push(p.loadSound(this.audioSources[index]))\r\n        this.covers.push(p.loadImage(this.coverSources[index]))\r\n      })\r\n    }\r\n\r\n    p.setup = () => {\r\n      this.setState({\r\n        fileIsLoaded: true,\r\n        audios: this.audios\r\n      },\r\n        () => {\r\n        this.setStateToLocalStorage()\r\n        this.getCoverColor()\r\n      })\r\n\r\n      let { width, height } = this.$visualizer.current.getBoundingClientRect()\r\n      this.setState({\r\n        canvasSize: { width: width, height: height },\r\n        visRadius: (width * 1/2) / 2 // canvas is a half of its container and we divide by 2 again for radius and not diameter\r\n      })\r\n      p.createCanvas(width, height).parent('canvasContainer')\r\n      fft = new p5.FFT(this.state.smoothing, this.state.samples)\r\n      p.frameRate(60)\r\n    }\r\n\r\n    p.draw = () => {\r\n      if (this.smoothingSave !== this.state.smoothing) {\r\n        fft = new p5.FFT(this.state.smoothing, this.state.samples)\r\n        this.smoothingSave = this.state.smoothing\r\n      }\r\n      if (this.samplesSave !== this.state.samples) {\r\n        fft = new p5.FFT(this.state.smoothing, this.state.samples)\r\n        this.samplesSave = this.state.samples\r\n      }\r\n      p.angleMode(p.DEGREES)\r\n      p.clear()\r\n      p.noStroke()\r\n      spectrum = fft.analyze()\r\n      waveform = fft.waveform()\r\n      p.translate(this.state.canvasSize.width / 2, this.state.canvasSize.height / 2)\r\n      p.rotate(-20)\r\n      spectrum =  spectrum.slice(0, Math.floor(spectrum.length *(2/3)))\r\n\r\n      // drawing spikes\r\n      spectrum.forEach((value, index) => {\r\n        let angle = p.map(index, 0, spectrum.length, 0, 360)\r\n        let valueCopy = p.map(value, 0, 255, this.state.visRadius*1.10, this.state.canvasSize.width * this.state.amplitude)\r\n        // let cosVal = valueCopy * p.cos(angle)\r\n        // let sinVal = valueCopy * p.sin(angle)\r\n        p.fill(this.state.coverColor)\r\n        p.push()\r\n        p.rotate(angle)\r\n        p.rect(0, 0, 9, valueCopy)\r\n        p.pop()\r\n      })\r\n\r\n      \r\n      // drawing the inner circle\r\n      p.beginShape()\r\n      spectrum.forEach((value, index) => {\r\n        let angle = p.map(index, 0, spectrum.length, 0, 360)\r\n        let waveformMultiplier = p.map(waveform[index], -1, 1, 1, 1.05)\r\n        let minimum = this.state.visRadius * waveformMultiplier * 1.05\r\n        let x = p.cos(angle) * minimum\r\n        let y = p.sin(angle) * minimum\r\n        p.vertex(x, y)\r\n        p.fill(\"#16191D\")\r\n        p.ellipse(0, 0, minimum, minimum)\r\n      })\r\n      p.endShape()\r\n    }\r\n\r\n    p.windowResized = () => {\r\n      let { width, height } = this.$visualizer.current.getBoundingClientRect()\r\n      this.setState({\r\n        canvasSize: { width: width, height: height },\r\n        visRadius: (width * 1 / 2) / 2\r\n      })\r\n      p.resizeCanvas(width, height)\r\n    }\r\n\r\n  }\r\n\r\n  toggleAudio = (trackNbParam = \"noparam\") => {\r\n    let trackNumber\r\n    if (trackNbParam === \"noparam\") {\r\n      trackNumber = this.state.activeTrack\r\n    } else {\r\n      trackNumber = trackNbParam\r\n      let previousTrack = this.state.activeTrack\r\n      this.setState({ activeTrack: trackNbParam }, () => {\r\n        this.getCoverColor()\r\n        if (previousTrack !== this.state.activeTrack) this.state.audios[previousTrack].stop()\r\n      })\r\n    }\r\n    if (this.state.fileIsLoaded && this.state.audios[trackNumber]) {\r\n      if (this.state.audios[trackNumber].isPlaying()) {\r\n        this.state.audios[trackNumber].pause()\r\n        // we have to force update as pausing the track doesnt' re render the dom so we're still on the play icon\r\n        this.forceUpdate() \r\n      } else {\r\n        this.state.audios[trackNumber].play()\r\n        this.forceUpdate() \r\n      }\r\n    }\r\n  }\r\n\r\n  dragAndDrop = event => {\r\n    const {currentTarget, clientY} = event\r\n    const {height, y} = currentTarget.getBoundingClientRect()\r\n    let relativePos = 1 - ((clientY - y) / height)\r\n\r\n    if (event.type === 'mousedown') {\r\n      this.setState({ mouseIsDown: true })\r\n      this.mouseDragStart = clientY\r\n      this.setState({ volume : relativePos },\r\n      () => {\r\n        this.state.audios.forEach((audio) => audio.setVolume(this.state.volume))\r\n        this.startVolume = this.state.volume\r\n      })\r\n    } else if (event.type === 'mousemove' && this.state.mouseIsDown) {\r\n      this.mouseDragDeltas = (this.mouseDragStart - (clientY)) / height\r\n\r\n      this.setState({ volume: this.startVolume + this.mouseDragDeltas },\r\n      () => this.state.audios.forEach((audio) => audio.setVolume(this.state.volume)))\r\n      \r\n    } else if (event.type === 'mouseup' || event.type === 'mouseleave') {\r\n      this.setState({ mouseIsDown: false })\r\n    }\r\n  }\r\n\r\n  getCoverColor = () => {\r\n    Vibrant.from(this.coverSources[this.state.activeTrack]).getPalette()\r\n      .then((palette) => this.setState({ coverColor: palette.LightVibrant.getRgb() }))\r\n  }\r\n\r\n  changeSongMoment = event => {\r\n    let { currentTarget, clientX } = event\r\n    let { width, x } = currentTarget.getBoundingClientRect()\r\n    let relativePos = clientX - x\r\n    relativePos /= width\r\n    if (this.state.audios[this.state.activeTrack]) {\r\n      this.state.audios[this.state.activeTrack].stop()\r\n      setTimeout(() => {\r\n        let songCMT = parseInt(relativePos * this.state.audios[this.state.activeTrack].duration())\r\n        this.setState({ currentMusicTime: songCMT })\r\n        this.state.audios[this.state.activeTrack].jump(songCMT)\r\n        this.state.audios[this.state.activeTrack].fade(this.state.volume, 2)\r\n      }, 10);\r\n    }\r\n  }\r\n\r\n  changeSong = direction => {\r\n    if (this.state.currentMusicTime > 3 && direction === \"previous\") {\r\n      this.state.audios[this.state.activeTrack].stop()\r\n      setTimeout(() => {\r\n        this.setState({ currentMusicTime: 0 });\r\n        this.state.audios[this.state.activeTrack].jump(0)\r\n      }, 10)\r\n      return\r\n    }\r\n    let canChangePrevious = direction === \"previous\" && this.state.activeTrack >= 1\r\n    let canChangeNext = direction === \"next\" && this.state.activeTrack < this.state.musicData.length - 1\r\n    this.setState(prevState => {\r\n      if (canChangePrevious) {\r\n        return { activeTrack: prevState.activeTrack - 1 }\r\n      } else if (canChangeNext) {\r\n        return { activeTrack: prevState.activeTrack + 1 } \r\n      }\r\n    }, () => {\r\n        if (canChangeNext || canChangePrevious) {\r\n          this.getCoverColor()\r\n          if (canChangeNext) {\r\n            this.state.audios[this.state.activeTrack-1].stop()\r\n            this.state.audios[this.state.activeTrack].play()\r\n          } else if (canChangePrevious) {\r\n            this.state.audios[this.state.activeTrack + 1].stop()\r\n            this.state.audios[this.state.activeTrack].play()\r\n          }\r\n        }\r\n    })\r\n  }\r\n\r\n  playlistSwitch = () => {\r\n    if (this.state.activeScreen === \"nowPlaying\") {\r\n      this.setState({ activeScreen: \"playlist\" })\r\n    } else {\r\n      this.setState({ activeScreen: \"nowPlaying\" })\r\n    }\r\n  }\r\n\r\n  optionSwitch = event => {\r\n    this.setState(prevState => {\r\n      return { displayOptions: !prevState.displayOptions }\r\n    })\r\n  }\r\n\r\n  keyboardEventsHandler = () => {\r\n    window.addEventListener('keydown', event => {\r\n      if (this.state.audios[this.state.activeTrack]) {\r\n        switch (event.code) {\r\n          case \"Space\":\r\n            this.toggleAudio()\r\n            break;\r\n\r\n          case \"ArrowRight\":\r\n            this.changeSong(\"next\")\r\n            break;\r\n\r\n          case \"ArrowLeft\":\r\n            this.changeSong(\"previous\")\r\n            break;\r\n\r\n          case \"ArrowUp\":\r\n            if (this.state.volume >= 0.95) {\r\n              this.setState({ volume: 1 },\r\n              () => this.state.audios[this.state.activeTrack].setVolume(this.state.volume))\r\n            } else {\r\n              this.setState(prevState => {\r\n                return { volume: prevState.volume + 0.05 }\r\n              }, () => this.state.audios[this.state.activeTrack].setVolume(this.state.volume))\r\n            }\r\n            break;\r\n          case \"ArrowDown\":\r\n            if (this.state.volume <= 0.05) {\r\n              this.setState({ volume: 0 });\r\n            } else {\r\n              this.setState(prevState => {\r\n                return { volume: prevState.volume - 0.05 };\r\n              })\r\n            }\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  updateStateFromSlider = (stateProperty, newValue) => {\r\n    this.setState({ [stateProperty]: newValue })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData()\r\n    this.setState({\r\n      visualizer: new p5(this.sketch)\r\n    },\r\n    this.keyboardEventsHandler)\r\n\r\n    this.interval = setInterval(() => {\r\n      if (this.state.audios[this.state.activeTrack]) {\r\n        if (this.state.audios[this.state.activeTrack].isPlaying()) {\r\n          this.setState({ currentMusicTime: parseInt(this.state.audios[this.state.activeTrack].currentTime()) });\r\n        }\r\n      }\r\n    }, 10)\r\n    this.loadingInterval = setInterval(() => {\r\n      this.increment = this.increment > 3.9 ? 0.8 : this.increment + 0.1\r\n      this.setState({ loadingInc: this.increment });\r\n    }, 100)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval)\r\n    clearInterval(this.loadingInterval)\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.storeState()\r\n    if (this.state.fileIsLoaded) clearInterval(this.loadingInterval)\r\n  }\r\n\r\n  render() {\r\n    let backgroundImageStyle, backgroundImageStyleCover\r\n    let cmtWidthStyle\r\n    let soundStyle\r\n    let soundTransformValue = 50\r\n    if (this.state.musicData) {\r\n      backgroundImageStyle = {\r\n        'backgroundImage': `url(${this.coverSources[this.state.activeTrack]})`,\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center center'\r\n      }\r\n      backgroundImageStyleCover = {\r\n        'backgroundImage': `url(${this.coverSources[this.state.activeTrack]})`,\r\n        backgroundSize: 'auto 105%',\r\n        backgroundPosition: 'center center'\r\n      }\r\n      if (this.state.audios[this.state.activeTrack]) {\r\n        cmtWidthStyle = {\r\n          'width': parseInt((this.state.currentMusicTime / this.state.audios[this.state.activeTrack].duration()) * 100) + \"%\"\r\n        }\r\n        soundTransformValue = -(1 - this.state.volume) * 100\r\n        soundStyle = {\r\n          'transform': `rotate(180deg) translateY(${soundTransformValue}%)`,\r\n          'transition': this.state.mouseIsDown ? 'none' : 'all 0.2s ease-in-out'\r\n        }\r\n      }\r\n    }\r\n    let renderedPlaylist\r\n    if (this.state.musicData) {\r\n      renderedPlaylist = this.state.musicData.map((track, index) =>\r\n        <div key={index} className=\"playlistElement\">\r\n          <img\r\n            onClick={() => { this.toggleAudio(index) }}\r\n            alt=\"cover\"\r\n            src={!this.state.audios[index]\r\n              ? playButton\r\n              : this.state.audios[index].isPlaying() ? pauseButton : playButton\r\n            }\r\n            className=\"playButton\"\r\n          ></img>\r\n          <div className=\"playlistWrap\">\r\n            <div className=\"left\">\r\n              <div className=\"artist\">{track.artistName + \" - \"}</div>\r\n              <div className=\"dash\">-</div>\r\n              <div className=\"title\">{track.title}</div>\r\n            </div>\r\n            <div className=\"duration\">\r\n              {this.state.audios[index] ? this.formatTime(this.state.audios[index].duration()) : track.duration}\r\n            </div>\r\n            {index === this.state.activeTrack && <div style={cmtWidthStyle} className=\"timeProgression\"></div>}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"background\">\r\n          <CSSTransitionGroup\r\n            transitionName=\"bgTransition\"\r\n            transitionEnterTimeout={300}\r\n            transitionLeaveTimeout={300}\r\n          >\r\n            <div key={this.state.activeTrack} style={backgroundImageStyle} className=\"bgImage\"></div>\r\n          </CSSTransitionGroup>\r\n          <div className=\"bgFilter\"></div>\r\n        </div>\r\n        <div className=\"musicPlayer\">\r\n          <div className=\"visualizer\">\r\n            {/* dummy div for to replace p5 base loading screen */}\r\n            <div style={{'display' : 'none'}} id=\"p5_loading\" className=\"loading\">LOADING</div>\r\n            <div className = {!this.state.fileIsLoaded ? \"loadingAnim load-on\" : \"loadingAnim load-off\"}></div>\r\n            <div ref={this.$visualizer} id=\"canvasContainer\"></div>\r\n            {this.state.fileIsLoaded && this.state.audios[this.state.activeTrack] &&\r\n              ( !this.state.displayOptions ?\r\n                <CSSTransitionGroup\r\n                  transitionName=\"cover\"\r\n                  transitionAppear={true}\r\n                  transitionAppearTimeout={300}\r\n                  transitionEnterTimeout={300}\r\n                  transitionLeaveTimeout={300}\r\n                >\r\n                  <div key={this.state.activeTrack} style={backgroundImageStyleCover} className=\"cover cover-img\"></div>\r\n                </CSSTransitionGroup>\r\n                : <div className=\"cover cover-options\">\r\n                  <CSSTransitionGroup\r\n                    transitionName=\"options\"\r\n                    transitionAppear={true}\r\n                    transitionAppearTimeout={300}\r\n                    transitionEnterTimeout={300}\r\n                    transitionLeaveTimeout={300}\r\n                  >   \r\n                    <div key={this.state.activeTrack} className=\"options-wrapper\">\r\n                      <div className=\"option\">\r\n                        <div className=\"option-txt\">smoothing</div>\r\n                        <Slider\r\n                          startValue={0}\r\n                          endValue={1}\r\n                          stateProperty={'smoothing'}\r\n                          currentValue={this.state.smoothing}\r\n                          changeHandler={this.updateStateFromSlider}\r\n                          ></Slider>\r\n                      </div>\r\n                      <div className=\"option\">\r\n                        <div className=\"option-txt\">Samples</div>\r\n                        <Slider\r\n                          startValue={64}\r\n                          endValue={1024}\r\n                          stateProperty={'samples'}\r\n                          currentValue={this.state.samples}\r\n                          changeHandler={this.updateStateFromSlider}\r\n                          ></Slider>\r\n                      </div>\r\n                      <div className=\"option\">\r\n                        <div className=\"option-txt\">Amplitude</div>\r\n                        <Slider\r\n                          startValue={0.3}\r\n                          endValue={0.6}\r\n                          stateProperty={'amplitude'}\r\n                          currentValue={this.state.amplitude}\r\n                          changeHandler={this.updateStateFromSlider}\r\n                        ></Slider>\r\n                      </div>\r\n                    </div>\r\n                  </CSSTransitionGroup>  \r\n                </div>\r\n              )\r\n            }{this.state.fileIsLoaded && this.state.audios[this.state.activeTrack] &&\r\n              <CSSTransitionGroup\r\n                transitionName=\"switch\"\r\n                transitionAppear = {true}\r\n                transitionAppearTimeout={300}\r\n                transitionEnterTimeout={300}\r\n                transitionLeaveTimeout={300}\r\n              >\r\n                <div key={this.state.activeTrack} onClick={this.optionSwitch} className=\"optionSwitchButton\">\r\n                  <img src={settings} alt=\"settings\"/>\r\n                </div>      \r\n              </CSSTransitionGroup>\r\n            }\r\n          </div>\r\n          <div className=\"card\">\r\n            {this.state.activeScreen === \"nowPlaying\" ?\r\n              <div className=\"flex-wrap\">\r\n                <div className=\"info\">\r\n                  <div className=\"artist\"> {this.state.fileIsLoaded ?\r\n                  this.state.musicData[this.state.activeTrack].artistName\r\n                  : `loading${\".\".repeat(parseInt(this.state.loadingInc))}`\r\n                  }</div>\r\n                  <div className=\"album\">{this.state.fileIsLoaded ?\r\n                    this.state.musicData[this.state.activeTrack].album\r\n                    : \"uwu\"\r\n                  }</div>\r\n                  <div className=\"title\">{this.state.fileIsLoaded ?\r\n                    this.state.musicData[this.state.activeTrack].title\r\n                    : \"please wait\"\r\n                  }</div>\r\n                </div>\r\n                <div className=\"controls\">\r\n                  <img\r\n                    src={nextSymbol}\r\n                    onClick={() => { this.changeSong(\"previous\") }}\r\n                    className=\"before\"\r\n                    alt=\"before-button\"\r\n                  ></img>\r\n                  <img\r\n                    src={this.state.fileIsLoaded ? (this.state.audios[this.state.activeTrack].isPlaying() ? pauseButton : playButton) : playButton}\r\n                    onClick={()=> {this.toggleAudio() }}\r\n                    className=\"playPause\"\r\n                    alt=\"play music\"\r\n                  ></img>\r\n                  <img\r\n                    src={nextSymbol}\r\n                    onClick={() => { this.changeSong(\"next\") }}\r\n                    className=\"next\"\r\n                    alt=\"next-button\"\r\n                  ></img>\r\n                </div>\r\n                <Slider\r\n                  audio={this.state.audios[this.state.activeTrack]}\r\n                  startValue={this.formatTime(this.state.currentMusicTime)}\r\n                  endValue={this.state.musicData && this.state.audios[this.state.activeTrack] ? this.formatTime(this.state.audios[this.state.activeTrack].duration()) : \"00:00\"}\r\n                  currentValue = {this.formatTime(this.state.currentMusicTime)}\r\n                  audioCurrentValuePercentage={this.state.musicData && this.state.audios[this.state.activeTrack] ?\r\n                    parseInt((this.state.currentMusicTime / this.state.audios[this.state.activeTrack].duration()) * 100)\r\n                    : 0\r\n                  }\r\n                  changeHandlerAudio={this.changeSongMoment}\r\n                ></Slider>\r\n              </div>\r\n              : renderedPlaylist ?\r\n                // <CSSTransitionGroup\r\n                //     transitionName = \"pop\"\r\n                //     transitionAppear={true}\r\n                //     transitionAppearTimeout={300}\r\n                //     transitionEnterTimeout={300}\r\n                //     transitionLeaveTimeout={300}>\r\n                // </CSSTransitionGroup>\r\n                <div key={this.state.activeTrack} className=\"playlist\">{renderedPlaylist}</div>\r\n                : \"loading\"\r\n            }\r\n            <div onClick={this.playlistSwitch} className=\"playlistSwitch\">{this.state.activeScreen === 'nowPlaying' ? \"PLAYLIST\" : 'PLAYING NOW'}</div>\r\n            <div\r\n              onClick={this.dragAndDrop}\r\n              onMouseDown = {this.dragAndDrop}\r\n              onMouseUp = {this.dragAndDrop}\r\n              onMouseMove = {this.dragAndDrop}\r\n              onMouseLeave = {this.dragAndDrop}\r\n              className=\"volume\"\r\n            >\r\n              <img src={musicSymbol} alt=\"music symobl\" className=\"volumeIcon\"></img>\r\n              <div style={soundStyle} className=\"volumeProgression\">\r\n                <div className=\"volumePercentage\">{\r\n                (this.state.volume *100) < 10 ?\r\n                \"0\"+parseInt(this.state.volume*100)\r\n                :parseInt(this.state.volume * 100)\r\n                }%</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()","module.exports = __webpack_public_path__ + \"static/media/pause.a83244f8.svg\";","module.exports = __webpack_public_path__ + \"static/media/next.b4705597.svg\";","module.exports = __webpack_public_path__ + \"static/media/music.40b86523.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.003ad3da.svg\";","module.exports = __webpack_public_path__ + \"static/media/cover01.a75032b4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cover02.06a64752.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cover03.a08f93da.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cover04.6130ea1f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/audio01.dc170e87.mp3\";","module.exports = __webpack_public_path__ + \"static/media/audio02.04420354.mp3\";","module.exports = __webpack_public_path__ + \"static/media/audio03.750bbe23.mp3\";","module.exports = __webpack_public_path__ + \"static/media/audio04.95225891.mp3\";"],"sourceRoot":""}