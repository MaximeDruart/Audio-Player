{"version":3,"sources":["play.svg","App.js","serviceWorker.js","index.js","pause.svg","next.svg","music.svg","covers/cover01.jpg","covers/cover02.jpg","covers/cover03.jpg","covers/cover04.jpg","audios/audio01.mp3","audios/audio02.mp3","audios/audio03.mp3","audios/audio04.mp3"],"names":["module","exports","App","props","storeState","localStorage","setItem","state","volume","activeTrack","setLocalStorageState","setState","JSON","parse","getItem","audios","forEach","audio","setVolume","formatTime","string","parseInt","min","second","toString","getSongsDuration","tempData","musicData","track","index","Audio","file","duration","getData","musicDataJSON","sketch","p","fft","spectrum","waveform","preload","push","loadSound","audioSources","covers","loadImage","coverSources","console","log","setup","getCoverColor","fileIsLoaded","$visualizer","current","getBoundingClientRect","width","height","canvasSize","visRadius","createCanvas","parent","p5","FFT","frameRate","draw","angleMode","DEGREES","clear","noStroke","analyze","translate","rotate","beginShape","length","vertex","value","angle","map","valueCopy","cosVal","cos","sinVal","sin","fill","coverColor","endShape","waveformMultiplier","minimum","x","y","ellipse","windowResized","resizeCanvas","toggleAudio","trackNumber","trackNbParam","jump","stop","isPlaying","pause","prevState","play","changeVolume","event","target","clientY","relativePos","cover","Vibrant","getPalette","then","palette","LightVibrant","getRgb","changeSongMoment","clientX","setTimeout","songCMT","currentMusicTime","fade","playlistSwitch","activeScreen","killAudios","i","keyboardEventsHandler","window","addEventListener","code","changeSong","visualizer","React","createRef","cover1","cover2","cover3","cover4","audio1","audio2","audio3","audio4","direction","this","canChangePrevious","canChangeNext","interval","setInterval","currentTime","prevProps","backgroundImageStyle","cmtWidthStyle","soundStyle","renderedPlaylist","soundTransformValue","backgroundSize","backgroundPosition","key","className","onClick","alt","src","pauseButton","playButton","artistName","title","style","transitionName","transitionEnterTimeout","transitionLeaveTimeout","ref","id","transitionAppear","transitionAppearTimeout","album","nextSymbol","musicSymbol","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06576405.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play.7cb817fa.svg\";","import React, {Component} from 'react'\r\nimport p5 from 'p5'\r\nimport 'p5/lib/addons/p5.sound';\r\nimport * as Vibrant from 'node-vibrant'\r\nimport musicDataJSON from './musicData.json'\r\nimport './App.css';\r\nimport playButton from './play.svg'\r\nimport pauseButton from './pause.svg'\r\nimport musicSymbol from './music.svg'\r\nimport nextSymbol from './next.svg'\r\nimport cover1 from './covers/cover01.jpg'\r\nimport cover2 from './covers/cover02.jpg'\r\nimport cover3 from './covers/cover03.jpg'\r\nimport cover4 from './covers/cover04.jpg'\r\nimport audio1 from './audios/audio01.mp3'\r\nimport audio2 from './audios/audio02.mp3'\r\nimport audio3 from './audios/audio03.mp3'\r\nimport audio4 from './audios/audio04.mp3'\r\nimport {CSSTransitionGroup} from 'react-transition-group'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      visualizer : \"\",\r\n      visRadius : \"\",\r\n      musicData : \"\",\r\n      canvasSize : {\r\n        width : \"\",\r\n        height : \"\"\r\n      },\r\n      fileIsLoaded : false,\r\n      activeTrack :  0,\r\n      activeScreen : \"nowPlaying\",\r\n      currentMusicTime : 0,\r\n      volume : 0.4,\r\n      audios:[],\r\n      coverColor : \"white\"\r\n     }\r\n     this.$visualizer = React.createRef()\r\n     this.audios = []\r\n     this.covers = []\r\n     this.coverSources = [cover1, cover2, cover3, cover4]\r\n     this.audioSources = [audio1, audio2, audio3, audio4]\r\n  }\r\n\r\n  storeState = () => {\r\n    localStorage.setItem('volume', this.state.volume)\r\n    localStorage.setItem('activeTrack', this.state.activeTrack)\r\n  }\r\n\r\n  setLocalStorageState = () => {\r\n    this.setState({\r\n      volume :  JSON.parse(localStorage.getItem('volume')),\r\n      activeTrack: JSON.parse(localStorage.getItem('activeTrack'))\r\n    })\r\n    if (this.state.audios) this.state.audios.forEach(audio => audio.setVolume(this.state.volume)) \r\n  }\r\n\r\n  formatTime = string => {\r\n    string = parseInt(string)\r\n    let min = (parseInt(string / 60))\r\n    min = min < 10 ? \"0\" + min.toString() : min.toString()\r\n    let second = string - min*60\r\n    second = second < 10 ? \"0\" + second.toString() : second.toString()\r\n    return min + \":\"+ second\r\n  }\r\n\r\n  getSongsDuration = () => {\r\n    let tempData = this.state.musicData\r\n    this.state.musicData.forEach((track, index) => {\r\n      let audio = new Audio(tempData[index].file)\r\n      tempData[index].duration = audio.duration\r\n    })\r\n    this.setState({ musicData: tempData });\r\n  }\r\n\r\n  getData = () => {\r\n    // wanted to do an api call but couldn't find an api that'd give me audio files...\r\n    this.setState({ musicData : musicDataJSON });\r\n  }\r\n\r\n\r\n  sketch = p => {\r\n    let fft\r\n    let spectrum\r\n    let waveform\r\n\r\n    p.preload = () => {\r\n      this.state.musicData.forEach((track, index) => {\r\n        this.audios.push(p.loadSound(this.audioSources[index]))\r\n        this.covers.push(p.loadImage(this.coverSources[index]))\r\n      })\r\n      console.log(this.covers, this.audios);\r\n      \r\n    }\r\n\r\n    p.setup = () => {      \r\n      this.getCoverColor()\r\n      this.setState({ fileIsLoaded: true, audios:this.audios })\r\n      let {width, height} = this.$visualizer.current.getBoundingClientRect()\r\n      this.setState({\r\n        canvasSize: {width : width, height : height},\r\n        visRadius : (width * 2  / 3 ) / 2\r\n      })\r\n      p.createCanvas(width, height).parent('canvasContainer')\r\n      fft = new p5.FFT(0.9, 256)\r\n      p.frameRate(60)\r\n    }\r\n\r\n    p.draw = () => {\r\n      p.angleMode(p.DEGREES)\r\n      p.clear()\r\n      p.noStroke()\r\n      spectrum = fft.analyze()\r\n      waveform = fft.waveform()\r\n      p.translate(this.state.canvasSize.width / 2, this.state.canvasSize.height / 2)\r\n      p.rotate(60)\r\n      p.beginShape()\r\n      if (spectrum[spectrum.length - 1] === 0) p.vertex(this.state.visRadius, 0)\r\n      spectrum.forEach((value, index) => {\r\n        let angle = p.map(index, 0, spectrum.length, 0, 360)\r\n        let valueCopy = p.map(value, 0, 255, this.state.visRadius, this.state.canvasSize.width * 0.6)\r\n        let cosVal = valueCopy * p.cos(angle)\r\n        let sinVal = valueCopy * p.sin(angle)\r\n        p.fill(this.state.coverColor)\r\n        p.vertex(cosVal, sinVal)\r\n        // line(0, 0, cosVal, sinVal)\r\n        // p.rect(0, 0, 10, valueCopy)\r\n        // p.rotate(angle)\r\n      })\r\n      p.endShape()\r\n\r\n      \r\n      p.beginShape()\r\n      spectrum.forEach((value, index)=> {\r\n          let angle = p.map(index, 0, spectrum.length, 0, 360)\r\n          let waveformMultiplier = p.map(waveform[index], -1, 1, 1, 1.05)\r\n          let minimum = this.state.visRadius * waveformMultiplier * 1.05\r\n          let x = p.cos(angle)*minimum\r\n          let y = p.sin(angle)*minimum\r\n          p.vertex(x, y)\r\n          // p.push()\r\n          p.fill(\"#16191D\")\r\n          p.ellipse(0, 0, minimum, minimum)\r\n          // p.pop()\r\n        })\r\n        p.endShape()\r\n    }\r\n\r\n    p.windowResized = () => {\r\n      let { width, height } = this.$visualizer.current.getBoundingClientRect()\r\n      this.setState({\r\n        canvasSize: { width: width, height: height },\r\n        visRadius: (width * 2 / 3) / 2\r\n      })\r\n      p.resizeCanvas(width, height)\r\n    }\r\n\r\n  }\r\n    \r\n  toggleAudio = (trackNbParam = \"noparam\") => {\r\n      let trackNumber\r\n    if (trackNbParam === \"noparam\") {\r\n      trackNumber = this.state.activeTrack\r\n    } else {\r\n      trackNumber = trackNbParam\r\n      this.setState({ activeTrack: trackNbParam });\r\n    }\r\n    this.state.audios.forEach((audio, index) => {\r\n      if (index !== trackNumber) {\r\n        audio.jump(0)\r\n        audio.stop()\r\n      }\r\n    })\r\n    if (this.state.fileIsLoaded && this.state.audios[trackNumber]) {\r\n      if (this.state.audios[trackNumber].isPlaying()) {\r\n        this.state.audios[trackNumber].pause()\r\n        this.setState(prevState => {\r\n          return { audios: prevState.audios };\r\n        });\r\n      } else {\r\n        console.log(\"play Toggle\");\r\n        \r\n        this.state.audios[trackNumber].play()      \r\n        this.setState(prevState => {\r\n          return { audios: prevState.audios };\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  changeVolume = event => {\r\n    let {target, clientY} = event\r\n    let {height, y} = target.getBoundingClientRect()\r\n    let relativePos =  clientY - y\r\n    relativePos /= height\r\n    relativePos = 1 - relativePos\r\n    this.setState({ volume: relativePos })\r\n    this.state.audios.forEach((audio) => {\r\n      audio.setVolume(relativePos)\r\n    })\r\n  }\r\n\r\n\r\n  getCoverColor = () => {\r\n    console.log(this.state.musicData[this.state.activeTrack].cover)\r\n    Vibrant.from(this.coverSources[this.state.activeTrack]).getPalette()\r\n    .then((palette) => this.setState({ coverColor : palette.LightVibrant.getRgb() }))\r\n  }\r\n\r\n  changeSongMoment = event => {\r\n    let { target, clientX } = event\r\n    let { width, x } = target.getBoundingClientRect()\r\n    let relativePos = clientX - x\r\n    relativePos /= width\r\n    if (this.state.audios[this.state.activeTrack]) {\r\n      this.state.audios[this.state.activeTrack].stop()\r\n      setTimeout(() => {\r\n        let songCMT = parseInt(relativePos * this.state.audios[this.state.activeTrack].duration())\r\n        this.setState({ currentMusicTime: songCMT })\r\n        this.state.audios[this.state.activeTrack].jump(songCMT)\r\n        this.state.audios[this.state.activeTrack].fade(this.state.volume, 2)\r\n      }, 10);\r\n    }\r\n  }\r\n\r\n  changeSong(direction){\r\n    if (this.state.currentMusicTime > 3 && direction===\"previous\") {\r\n      this.state.audios[this.state.activeTrack].stop()\r\n      setTimeout(() => {\r\n        this.setState({ currentMusicTime: 0 });\r\n        this.state.audios[this.state.activeTrack].jump(0)\r\n      }, 10)\r\n      return\r\n    }\r\n    let canChangePrevious = direction === \"previous\" && this.state.activeTrack >= 1\r\n    let canChangeNext = direction === \"next\" && this.state.activeTrack < this.state.musicData.length - 1\r\n    this.setState(prevState => {\r\n      if (canChangePrevious) {\r\n        return { activeTrack: prevState.activeTrack-1 };\r\n      } else if (this.state.musicData) {\r\n        if (canChangeNext) {\r\n          return { activeTrack: prevState.activeTrack+1 };\r\n        }\r\n      }\r\n    })\r\n    \r\n    // c'est ghetto mais jsp pas pourquoi il y a un délai sur la modif de state au dessus\r\n    setTimeout(() => {\r\n      if (canChangeNext || canChangePrevious) {\r\n        this.getCoverColor()\r\n        this.state.audios.forEach((audio, index) => {\r\n          if (canChangeNext) {\r\n            if (index !== this.state.activeTrack) {\r\n              audio.jump(0)\r\n              audio.stop()\r\n            } else {\r\n              audio.jump(0)\r\n              audio.fade(this.state.volume, 5)\r\n            }\r\n          } else if (canChangePrevious) {\r\n            if (index !== this.state.activeTrack) {\r\n              audio.jump(0)\r\n              audio.stop()\r\n            } else {\r\n              audio.jump(0)\r\n              audio.fade(this.state.volume, 5)\r\n            }\r\n          }\r\n        })\r\n      }\r\n    }, 10);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setLocalStorageState()\r\n    this.getData()\r\n    this.setState({ visualizer: new p5(this.sketch) });\r\n    this.keyboardEventsHandler()\r\n\r\n    this.interval = setInterval(() => {\r\n      if (this.state.audios[this.state.activeTrack]) { \r\n        if (this.state.audios[this.state.activeTrack].isPlaying()) {\r\n          this.setState({ currentMusicTime: parseInt(this.state.audios[this.state.activeTrack].currentTime()) });\r\n        }\r\n      }\r\n    }, 10)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    // clearInterval(this.interval)\r\n  }\r\n\r\n\r\n  playlistSwitch = () => {\r\n    if (this.state.activeScreen === \"nowPlaying\") {\r\n      this.setState({ activeScreen: \"playlist\" })\r\n    } else {\r\n      this.setState({ activeScreen: \"nowPlaying\" }) \r\n    }\r\n  }\r\n\r\n  killAudios = () => {\r\n    // let audioTemp = this.state.audios\r\n    // this.state.audios.forEach((audio, index) => {\r\n    //   audio.stop()\r\n    // })\r\n    for (let i = 0; i < this.state.audios.length; i++) {\r\n      this.state.audios[i].stop()\r\n    }\r\n    // this.setState({ audios: [0,0,0,0] });\r\n    // this.setState({ audios: audioTemp  });\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    this.storeState()\r\n  }\r\n\r\n  keyboardEventsHandler = () => {   \r\n    \r\n    window.addEventListener('keydown', event => {\r\n      if (this.state.audios[this.state.activeTrack]) {        \r\n        switch (event.code) {\r\n          case \"Space\":\r\n            this.toggleAudio()\r\n            break;\r\n  \r\n          case \"ArrowRight\":\r\n              this.changeSong(\"next\")\r\n            break;\r\n        \r\n          case \"ArrowLeft\":\r\n              this.changeSong(\"previous\")\r\n            \r\n            break;\r\n  \r\n          case \"ArrowUp\":\r\n            if (this.state.volume >= 0.95) {\r\n              this.setState({ volume : 1 });\r\n            } else {\r\n              this.setState(prevState => {\r\n                return { volume: prevState.volume+0.05 };\r\n              })\r\n            }\r\n            break;\r\n          case \"ArrowDown\":\r\n            if (this.state.volume <= 0.05) {\r\n              this.setState({ volume: 0 });\r\n            } else {\r\n              this.setState(prevState => {\r\n                return { volume: prevState.volume - 0.05 };\r\n              })\r\n            }\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  render() { \r\n    let backgroundImageStyle\r\n    let cmtWidthStyle\r\n    let soundStyle\r\n    let soundTransformValue = 50\r\n    if (this.state.musicData) {      \r\n      backgroundImageStyle = {\r\n        'backgroundImage' : `url(${this.coverSources[this.state.activeTrack]})`,\r\n        backgroundSize : 'cover',\r\n        backgroundPosition : 'center center'\r\n      }\r\n      if (this.state.audios[this.state.activeTrack]) {\r\n        cmtWidthStyle = {\r\n          'width' : parseInt((this.state.currentMusicTime / this.state.audios[this.state.activeTrack].duration())*100) + \"%\"\r\n        }\r\n        soundTransformValue = -(1 - this.state.volume)*100\r\n        soundStyle = {\r\n          'transform' : `rotate(180deg) translateY(${soundTransformValue}%)`,\r\n          'transition' : 'transform 0.3s ease-in-out'\r\n        }\r\n      }\r\n    }\r\n    let renderedPlaylist\r\n    if (this.state.musicData) {\r\n      renderedPlaylist = this.state.musicData.map( (track, index) =>\r\n      <div key={index} className=\"playlistElement\">\r\n        <img\r\n          onClick={()=> {this.toggleAudio(index)}}\r\n          alt=\"cover\"\r\n          src={!this.state.audios[index]\r\n            ? playButton\r\n            : this.state.audios[index].isPlaying() ? pauseButton : playButton\r\n          }\r\n          className=\"playButton\"\r\n        ></img>\r\n        <div className=\"playlistWrap\">\r\n          <div className=\"left\">\r\n            <div className=\"artist\">{track.artistName + \" - \"}</div>\r\n            <div className=\"title\">{track.title}</div>\r\n          </div>\r\n          <div className=\"duration\">{this.state.audios[index] ? this.formatTime(this.state.audios[index].duration()) : track.duration}</div>\r\n          {(index === this.state.activeTrack) ? <div style={cmtWidthStyle} className=\"timeProgression\"></div> : \"\"}\r\n        </div>\r\n      </div>\r\n      )\r\n    }\r\n\r\n    return ( \r\n      <div className=\"container\">\r\n        <div className=\"background\">\r\n          <CSSTransitionGroup\r\n            transitionName=\"bgTransition\"\r\n            transitionEnterTimeout={300}\r\n            transitionLeaveTimeout={300}\r\n          >\r\n            <div key={this.state.activeTrack} style ={backgroundImageStyle} className=\"bgImage\"></div>\r\n          </CSSTransitionGroup>\r\n          <div className=\"bgFilter\"></div>\r\n        </div>\r\n        <div className=\"musicPlayer\">\r\n          <div className=\"visualizer\">\r\n            <div ref={this.$visualizer} id=\"canvasContainer\"></div>\r\n            { this.state.fileIsLoaded && this.state.audios[this.state.activeTrack] ?\r\n              <CSSTransitionGroup\r\n                transitionName=\"cover\"\r\n                transitionAppear={true}\r\n                transitionAppearTimeout={500}\r\n                transitionEnterTimeout={300}\r\n                transitionLeaveTimeout={300}\r\n              >\r\n                <div key={this.state.activeTrack} style={backgroundImageStyle} className=\"cover\"></div>\r\n              </CSSTransitionGroup>\r\n            : <div\r\n              style={{\r\n                'textAlign':'center',\r\n                'color':'white'\r\n              }\r\n              }\r\n              className=\"loading\">LOADING</div>\r\n            }\r\n          </div>\r\n          <div className=\"card\">\r\n              {this.state.activeScreen === \"nowPlaying\" ?\r\n              <div className=\"flex-wrap\">\r\n                <div className=\"info\">\r\n                  <div className=\"artist\">{this.state.musicData ? this.state.musicData[this.state.activeTrack].artistName : \"artist\"}</div>\r\n                  <div className=\"album\">{this.state.musicData ? this.state.musicData[this.state.activeTrack].album : \"album\"}</div>\r\n                  <div className=\"title\">{this.state.musicData ? this.state.musicData[this.state.activeTrack].title : \"title\"}</div>\r\n                </div>\r\n                <div className=\"controls\">\r\n                  <img alt=\"before-button\" src={nextSymbol} onClick={()=> {this.changeSong(\"previous\")}} className=\"before\"></img>\r\n                  <img\r\n                    src={this.state.fileIsLoaded ? (this.state.audios[this.state.activeTrack].isPlaying() ? pauseButton : playButton) : playButton}\r\n                    onClick={()=>{this.toggleAudio()}}\r\n                    className=\"playPause\"\r\n                    alt=\"play music\"\r\n                  ></img>      \r\n                  <img alt=\"next-button\" src={nextSymbol} onClick={()=> {this.changeSong(\"next\")}} className=\"next\"></img>\r\n                </div>\r\n                <div onClick={this.changeSongMoment} className=\"progressBar\">\r\n                  <div className=\"actualTime\">{this.formatTime(this.state.currentMusicTime)}</div>\r\n                  <div className=\"totalTime\">{\r\n                  this.state.musicData && this.state.audios[this.state.activeTrack] ?  this.formatTime(this.state.audios[this.state.activeTrack].duration()) : \"00:00\"\r\n                  }</div>\r\n                  <div\r\n                    style={cmtWidthStyle}\r\n                    className=\"timeProgression\"\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n              : renderedPlaylist ?\r\n              // <CSSTransitionGroup\r\n              //     transitionName = \"playlist-pop\"\r\n              //     transitionEnterTimeout={500}\r\n              //     transitionLeaveTimeout={300}\r\n              // >\r\n                <div key={this.state.activeTrack} className=\"playlist\">{renderedPlaylist}</div>\r\n              // </CSSTransitionGroup>\r\n               : \"loading\"\r\n              }\r\n            <div onClick = {this.playlistSwitch} className=\"playlistSwitch\">{this.state.activeScreen === 'nowPlaying' ? \"PLAYLIST\" : 'PLAYING NOW'}</div>\r\n            <div onClick={this.changeVolume} className=\"volume\">\r\n              <img src={musicSymbol} alt=\"music symobl\" className=\"volumeIcon\"></img>\r\n              <div style={soundStyle} className=\"volumeProgression\">\r\n                <div className=\"volumePercentage\">{parseInt(this.state.volume*100)}%</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n     );\r\n  }\r\n}\r\n \r\nexport default App ;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n// // 1 : FETCH :\r\n// // fetch va aller chercher des données à une adresse x et les return.\r\n// // La particularité de fetch c'est que c'est une promesse\r\n// // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\r\n// //https://mdn.mozillademos.org/files/15911/promises.png\r\n// // donc une promesse a la particularité d'etre asynchrone, ce qui veut dire que le code que tu vas chain (avec then) va attendre que la promesse ne soit plus en statut \"attente\" (soit pending, cf. schema)\r\n// // Une fois plus en attente, la promesse peut avoir 2 statuts : réussite ou échec.\r\n// // Si c'est une réussite, on va éxécuter le .then(), si c'est un échec le .catch() (mais bon tu t'en fous de l'échec en vrai)\r\n// let data\r\n// fetch(\"https://ladressedetonfichier.com\") // on fetch a l'adresse\r\n// .then((fetchedData) => { // si le promesse a un statut \"succès\", le .then() est lu. Il aura en parametre ce que fetch est allé chercher\r\n//     fetchedData.json() // si les données sont de type JSON il faut lui appliquer la méthode donnée.json() pour le transformer en un objet standard\r\n// })\r\n// .then((jsonData) => { // json() renvoie une promesse je sais pas pq, mais donc tu peux la rechain et la stocker\r\n//     data = jsonData\r\n// }) \r\n\r\n\r\n// // MAIS : tout ca sert a rien si ton fichier est local parce que il y aura pas le délai qui vient d'une requete faite sur internet et donc pas besoin d'écrire du code asynchrone (promesse)\r\n// // Tu peux juste avoir ton fichier mesDonnees.json avec tes fichiers\r\n// // Dans tes scripts tu l'importes comme si c'était un fichier js standard et le lire en tant qu'objet.\r\n// // Dans ce cas la le json est pas du tout nécessaire mais c'est une manière pratique de stocker une quantité de donnée importante sans que ca pollue ton javascript","module.exports = __webpack_public_path__ + \"static/media/pause.a83244f8.svg\";","module.exports = __webpack_public_path__ + \"static/media/next.b4705597.svg\";","module.exports = __webpack_public_path__ + \"static/media/music.40b86523.svg\";","module.exports = __webpack_public_path__ + \"static/media/cover01.1845849d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cover02.19f85108.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cover03.83d85b4c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cover04.b93229bb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/audio01.29e6d449.mp3\";","module.exports = __webpack_public_path__ + \"static/media/audio02.5e067a43.mp3\";","module.exports = __webpack_public_path__ + \"static/media/audio03.3314f366.mp3\";","module.exports = __webpack_public_path__ + \"static/media/audio04.4c6da638.mp3\";"],"sourceRoot":""}